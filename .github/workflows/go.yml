name: Go_test

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Also trigger on page_build, as well as release created events

jobs:
# The "build" workflow
  build-run:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    # Setup Go
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '^1.17.4' # The Go version to download (if necessary) and use.
    

    # Install all the dependencies
    - name: Install dependencies
      run: |
        go version
        go get -u golang.org/x/lint/golint
        
    - name: Install Dependencies
      run: |
        PATH_GO=$HOME/work/golang/golang
        export PATH_GO

     # adding go package 
    - name: Install GO package
      run: |
        sudo mkdir -v $GOPATH/src $GOPATH/src/calculation $GOROOT/src/calculation

        sudo cp -rf package/calc* $GOPATH/src/calculation/
        sudo cp -rf package/calc* $GOROOT/src/calculation/

        sudo su
        cd $GOPATH/src/calculation/
        sudo go install

        cd $GOROOT/src/calculation
        sudo go install

        cd $HOME/work/golang/golang
    
      # adding go package 
    - name: Go Programs Input-output
      run: |
        PROJECT_FILES=$HOME/work/golang/golang
        export PROJECT_FILES

        PATH_GOF=( $PROJECT_FILES/hello/hello.go $PROJECT_FILES/var/var.go $PROJECT_FILES/if-else/if-else.go $PROJECT_FILES/switch-case/switch-case.go $PROJECT_FILES/array/array.go $PROJECT_FILES/slice/slice.go $PROJECT_FILES/slice/slice-size.go $PROJECT_FILES/function/function.go $PROJECT_FILES/package/package.go $PROJECT_FILES/defer/defer.go $PROJECT_FILES/defer/stacking-defer.go $PROJECT_FILES/pointers/pointers.go $PROJECT_FILES/pointers/pointers-ast.go $PROJECT_FILES/structures/structures.go $PROJECT_FILES/methods/methods.go $PROJECT_FILES/goroutines/goroutines.go $PROJECT_FILES/goroutines/goroutines-disp.go $PROJECT_FILES/channels/channels.go $PROJECT_FILES/channels/channels-goroutines.go $PROJECT_FILES/select/select.go $PROJECT_FILES/select/select-default.go $PROJECT_FILES/mutex/mutex.go $PROJECT_FILES/mutex/mutex-goroutines.go $PROJECT_FILES/error/error.go $PROJECT_FILES/error/error-custom.go $PROJECT_FILES/read-write/read.go $PROJECT_FILES/read-write/write.go )
        

        
        print_out () {
        
          ## cd ${PATH_GOF[ $i ]}
          echo -e "\n\n\n ========================================== FILE INPUT ==========================================  \n\n\n"
          echo -e "Program no: $i \n\n"
          
          cat ${PATH_GOF[ $i ]}
          echo -e "\n\n\n ========================================== FILE OUTPUT ==========================================  \n\n\n"
                
          go run ${PATH_GOF[ $i ]}
        }



        CURRENT_DIR=$(pwd)
        export CURRENT_DIR

        touch data.txt
        echo 'this is line one' > data.txt
        
        # echo ${#PATH_GOF[@]}
                  
        for i in `seq 0 $((${#PATH_GOF[@]}-1))`;
        do
            print_out
        done

        cd $CURRENT_DIR
