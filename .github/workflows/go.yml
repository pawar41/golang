name: Go_test

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Also trigger on page_build, as well as release created events

jobs:
# The "build" workflow
  build-run:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    # Setup Go
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '^1.17.4' # The Go version to download (if necessary) and use.
    

    # Install all the dependencies
    - name: Install dependencies
      run: |
        go version
        go get -u golang.org/x/lint/golint
        
    # run hello.go file
    - name: run hello/hello.go
      run: | 
        echo "file input"
        cat hello/*.go
        echo "file output"
        go run hello/*.go

        
    # run var.go file
    - name: run var/var.go
      run: |
        echo "file input"
        cat var/*.go
        echo "file output"
        go run var/*.go


    # run if-else.go file
    - name: run if-else/if-else.go
      run: |
        echo "file input"
        cat if-else/*.go
        echo "file output"
        go run if-else/*.go


    # run switch-case.go file
    - name: run switch-case/switch-case.go
      run: |
        echo "file input"
        cat switch-case/*.go
        echo "file output"
        go run switch-case/*.go


    # run array.go file
    - name: run array/array.go
      run: |
        echo "file input"
        cat array/*.go
        echo "file output"
        go run array/*.go


    # run slice.go file
    - name: run slice/slice.go
      run: |
        echo "file input"
        cat slice/slice.go
        echo "file output"
        go run slice/slice.go


    # Run slice-size.go file
    - name: run slice/slice-size.go
      run: |
        echo "file input"
        cat slice/slice-size.go
        echo "file output"
        go run slice/slice-size.go


    # Run function.go file
    - name: run function/function.go
      run: |
        echo "file input"
        cat function/*.go
        echo "file output"
        go run function/*.go

     # adding go package 
    - name: 'adding go package: "calculation"'
      run: |
        sudo mkdir $GOPATH/src
        sudo mkdir $GOPATH/src/calculation

        sudo mkdir $GOROOT/src/calculation

        sudo cp -rf package/calc* $GOPATH/src/calculation/
        sudo cp -rf package/calc* $GOROOT/src/calculation/

        sudo su
        cd $GOPATH/src/calculation/
        sudo go install
        
        cd $GOROOT/src/calculation
        sudo go install

        cd $HOME/work/golang/golang
      


    # Run package.go file
    - name: run package/package.go
      run: |
        echo "file input"
        cat package/package.go
        echo "file output"
        go run package/package.go
      


    # Run defer.go file
    - name: run defer/defer.go
      run: |
        echo "file input"
        cat defer/defer.go
        echo "file output"
        go run defer/defer.go
      


    # Run stacking-defer.go file
    - name: run defer/stacking-defer.go
      run: |
        echo "file input"
        cat defer/stacking-defer.go
        echo "file output"
        go run defer/stacking-defer.go
      


    # Run pointers.go file
    - name: run pointers/pointers.go
      run: |
        echo "file input"
        cat pointers/pointers.go
        echo "file output"
        go run pointers/pointers.go
      


    # Run pointers-ast.go file
    - name: run pointers/pointers-ast.go
      run: |
        echo "file input"
        cat pointers/pointers-ast.go
        echo "file output"
        go run pointers/pointers-ast.go
      


    # Run structures.go file
    - name: run structures/structures.go
      run: |
        echo "file input"
        cat structures/structures.go
        echo "file output"
        go run structures/structures.go
      


    # Run methods.go file
    - name: run methods/methods.go
      run: |
        echo "file input"
        cat methods/methods.go
        echo "file output"
        go run methods/methods.go
      


    # Run goroutines.go file
    - name: run goroutines/goroutines.go
      run: |
        echo "file input"
        cat goroutines/goroutines.go
        echo "file output"
        go run goroutines/goroutines.go
      


    # Run goroutines-disp.go file
    - name: run goroutines/goroutines-disp.go
      run: |
        echo "file input"
        cat goroutines/goroutines-disp.go
        echo "file output"
        go run goroutines/goroutines-disp.go
      


    # Run channels.go file
    - name: run channels/channels.go
      run: |
        echo "file input"
        cat channels/channels.go
        echo "file output"
        go run channels/channels.go
      


    # Run channels-channels.go file
    - name: run channels/channels-goroutines.go
      run: |
        echo "file input"
        cat channels/channels-goroutines.go
        echo "file output"
        go run channels/channels-goroutines.go
      


    # Run select.go file
    - name: run select/select.go
      run: |
        echo "file input"
        cat select/select.go
        echo "file output"
        go run select/select.go
      


    # Run select-default.go file
    - name: run select/select-default.go
      run: |
        echo "file input"
        cat select/select-default.go
        echo "file output"
        go run select/select-default.go
      


    # Run mutex.go file
    - name: run mutex/mutex.go
      run: |
        echo "file input"
        cat mutex/mutex.go
        echo "file output"
        go run mutex/mutex.go
      


    # Run mutex-goroutines.go file
    - name: run mutex/mutex-goroutines.go
      run: |
        echo "file input"
        cat mutex/mutex-goroutines.go
        echo "file output"
        go run mutex/mutex-goroutines.go
